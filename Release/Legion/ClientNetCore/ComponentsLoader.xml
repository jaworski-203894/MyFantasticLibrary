<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentsLoader</name>
    </assembly>
    <members>
        <member name="T:ComponentsLoader.ComponentsConfiguration">
            <summary>
             Handler of components section in app.config.
            </summary>
        </member>
        <member name="M:ComponentsLoader.ComponentsConfiguration.CreateComponents(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Reades components configuration from app.config.
             Should be used in other class that can acces System.Configuration.IConfigurationSectionHandler in Create method.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext"> Configuration context object.</param>
            <param name="section">Section XML node</param>
            <returns>List&lt;Tuple&lt;Type, string, string, string, string>> with components parameters.</returns>
        </member>
        <member name="T:ComponentsLoader.LoadedComponent`1">
            <summary>
            Represents loaded component.
            </summary>
            <typeparam name="T">Base type or interface of component.</typeparam>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.Singleton">
            <summary>
            Singleton instance of component.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.NewInstantion">
            <summary>
            New instance of component.
            </summary>
        </member>
        <member name="M:ComponentsLoader.LoadedComponent`1.#ctor(System.Type,System.String)">
            <summary>
            Initializes new instance of LoadedComponent.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if component is null.</exception>
            <param name="component">Type of component</param>
            <param name="baseDirectory">Directory that contains component .dll file</param>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.BaseDirectory">
            <summary>
            Directory that contains component .dll file
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.Name">
            <summary>
            Name of component.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.Version">
            <summary>
            Version of component.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.Publisher">
            <summary>
            Publisher of component.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.Description">
            <summary>
            Description of component.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.AssemblyName">
            <summary>
            Name of component's assembly.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.ReferencedAssembliesNames">
            <summary>
            Names of referenced assemblies to component's assembly.
            </summary>
        </member>
        <member name="P:ComponentsLoader.LoadedComponent`1.RequiredAssemblies">
            <summary>
            Name of component's assembly and names of referenced assemblies to component's assembly.
            </summary>
        </member>
        <member name="M:ComponentsLoader.LoadedComponent`1.ToString">
            <summary>
            ToString() method.
            </summary>
            <returns>Name, version, publisher and description of component.</returns>
        </member>
        <member name="T:ComponentsLoader.Loader">
            <summary>
            Loader of components.
            </summary>
        </member>
        <member name="M:ComponentsLoader.Loader.Instantialize``1(System.Type)">
            <summary>
            Creates instance of component.
            </summary>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="toInstantialize">Type to instantialize.</param>
            <returns>Instantialized component.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponentByName``1(System.String,System.String)">
            <summary>
            Get component idetified by name.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns><see cref="T:ComponentsLoader.LoadedComponent`1"/> with selected component or null.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponents``1(System.String)">
            <summary>
            Get components from directory.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="directoryPath">Name of directory with components.</param>
            <returns>List of all components in directory.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponentByNameVersion``1(System.String,System.String,System.String)">
            <summary>
            Gets components idetified by name and version.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="version">Version of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns><see cref="T:ComponentsLoader.LoadedComponent`1"/> with selected component or null.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponentByNamePublisher``1(System.String,System.String,System.String)">
            <summary>
            Gets components idetified by name and publiser.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="publisher">Publisher of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns><see cref="T:ComponentsLoader.LoadedComponent`1"/> with selected component or null.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponentByNameVersionPublisher``1(System.String,System.String,System.String,System.String)">
            <summary>
            Gets components idetified by name, version and publisher.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="version">Version of component.</param>
            /// <param name="publisher">Publisher of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns><see cref="T:ComponentsLoader.LoadedComponent`1"/> with selected component or null.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponentsFromConfiguration``1(System.String)">
            <summary>
            Gets components defined in configuration file. Structure of components section:
            <components>
                <type>Full name of component base type or interface, Assembly with this type or interface</type>
                <name>Name of component</name>
                <version>Version of component</version>
                <publisher>Publisher of component</publisher>
                <directory>Directory with component</directory>
            </components>
            Version, publiser, directory are optional.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if configPath is null or empty.</exception>
            <typeparam name="T">Type of component.</typeparam>
            <param name="configPath">Path to configuration file (xml)</param>
            <returns>List of <see cref="T:ComponentsLoader.LoadedComponent`1"/> from configuration.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.GetComponentsFromConfiguration``1(System.Collections.Generic.List{ConfigurationManager.Field})">
            <summary>
            Gets components defined as part of configuration file. Structure of components section:
            <components>
                <type>Full name of component base type or interface, Assembly with this type or interface</type>
                <name>Name of component</name>
                <version>Version of component</version>
                <publisher>Publisher of component</publisher>
                <directory>Directory with component</directory>
            </components>
            Version, publiser, directory are optional.
            </summary>
            <typeparam name="T">Type of component.</typeparam>
            <param name="componentsInformation">Part of configuration file (xml) with components configuration.</param>
            <returns>List of <see cref="T:ComponentsLoader.LoadedComponent`1"/> from configuration.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.IsComponentAvaiableByName``1(System.String,System.String)">
            <summary>
            Checks if component identified by name is avaiable.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns>Availability of selected component.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.IsComponentAvaiableByNameVersion``1(System.String,System.String,System.String)">
            <summary>
            Checks if component identified by name and version is avaiable.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="version">Version of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns>Availability of selected component.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.IsComponentAvaiableByNamePublisher``1(System.String,System.String,System.String)">
            <summary>
            Checks if component identified by name and publisher is avaiable.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="publisher">Publisher of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns>Availability of selected component.</returns>
        </member>
        <member name="M:ComponentsLoader.Loader.IsComponentAvaiableByNameVersionPublisher``1(System.String,System.String,System.String,System.String)">
            <summary>
            Checks if component identified by name, version and publisher is avaiable.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if name or directoryPath is null or empty.</exception>
            <typeparam name="T">Base type or instance of component.</typeparam>
            <param name="name">Name of component.</param>
            <param name="version">Version of component.</param>
            <param name="publisher">Publisher of component.</param>
            <param name="directoryPath">Name of directory with components.</param>
            <returns>Availability of selected component.</returns>
        </member>
        <member name="T:ComponentsLoader.NotComponentTypeException">
            <summary>
            Exception for using type without ComponentAttribute
            </summary>
        </member>
        <member name="M:ComponentsLoader.NotComponentTypeException.#ctor">
            <summary>
            Initializes new instance of NotComponentTypeException.
            </summary>
        </member>
        <member name="M:ComponentsLoader.NotComponentTypeException.#ctor(System.String)">
            <summary>
            Initializes new instance of NotComponentTypeException.
            </summary>
            <param name="message">Message of exception.</param>
        </member>
        <member name="M:ComponentsLoader.NotComponentTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes new instance of NotComponentTypeException.
            </summary>
            <param name="message">Message of exception.</param>
            <param name="innerException">Exception that caused current exception.</param>
        </member>
        <member name="M:ComponentsLoader.NotComponentTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of NotComponentTypeException.
            </summary>
            <param name="info">Information about serialized object.</param>
            <param name="context">Context of serialization.</param>
        </member>
    </members>
</doc>
